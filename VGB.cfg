[gcode_macro _VGB]
variable_temp_min: 25.3
variable_temp_max: 38.5
variable_step: 0.1
variable_enable: 1
variable_thermistor_name: "temperature_sensor frame"
############################ DO NOT CHANGE ANYTHING BELOW UNLESS YOU KNOW WHAT YOU ARE DOING ####################################
variable_last_temp: 0
variable_vgb_z_offset: 0
variable_max_vgb_z_offset: 0.2
gcode:
  {% set RESET = params.RESET|default(0)|string %}
  #make sure values for global Z offset are loaded
  {% set regular_range = printer["gcode_macro _GET_MESH_MINMAX"].regular_range %}
  {% if regular_range == 999 %}
    _GET_REGULAR_MESH_MINMAX
  {% endif %}
  {% if enable and RESET=="0" %}
    #take <thermistor_name> temp, load bed mesh that is closest, adjust global Z offset
    #precautions - range only takes integers
    {% set mult_min = 10**((temp_min|string)|length) %}
    {% set mult_max = 10**((temp_max|string)|length) %}
    {% set mult_step = 10**((temp_step|string)|length) %}
    {% if mult_min > mult_max %}
      {% if mult_min > mult_step %}
        {% set multiplier = mult_min %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% else %}
      {% if mult_max > mult_step %}
        {% set multiplier = mult_max %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% endif %}
    #get current temp
    {% set current_temp = printer[thermistor_name].temperature|float %}
    SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=last_temp VALUE={current_temp|float}
    #find closest value to current temp
    {% set vals = {'min': 999, 'temp': 999} %}
    {% for temp in range((temp_min*multiplier)|int, (temp_max*multiplier)|int, (step*multiplier)|int) %}
      {% if ((temp/multiplier)|float-current_temp)|abs < vals.min|float %}
        {% if  vals.update({'min': ((temp/multiplier)|float-current_temp)|abs}) %} {% endif %}
        {% if  vals.update({'temp': (temp/multiplier)}) %} {% endif %}
      {% endif %}
    {% endfor %}
    BED_MESH_PROFILE LOAD={vals.temp} #apply best match
  {% else %}
    BED_MESH_PROFILE LOAD=REGULAR #apply regular mesh
  {% endif %}

  #regardless of enable, run global z offset calculation
  #_GET_MESH_MINMAX #get new mesh minmax range for global z offset
  #_GLOBAL_OFFSET_CALC
  
[gcode_macro _GLOBAL_OFFSET_CALC]
variable_multiplier: 1 #black magic
gcode:
  {% set regular_range = printer["gcode_macro _GET_MESH_MINMAX"].regular_range %}
  {% set new_range = printer["gcode_macro _GET_MESH_MINMAX"].new_range %}
  {% set vgb_z_offset = printer["gcode_macro _VGB"].vgb_z_offset %}
  {% set max_vgb_z_offset = printer["gcode_macro _VGB"].max_vgb_z_offset %}
  {% set enabled = printer["gcode_macro _VGB"].enable %}

  {% if enabled %}
    {% set new_offset = (new_range|float - regular_range|float) * (-1) * multiplier|float %}
    {% if new_offset|abs > max_vgb_z_offset and not max_vgb_z_offset == 0 %}
      { action_respond_info("VGB offset above limit, no Z offset applied! Check your meshes!") }
      {% set new_offset = 0 %}
    {% endif %}
  {% else %}
    {% set new_offset = 0 %}
  {% endif %}
  SET_GCODE_OFFSET Z_ADJUST={new_offset|float - (vgb_z_offset|float)} MOVE=1
  SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=vgb_z_offset VALUE={new_offset|float}


[gcode_macro _GET_MESH_MINMAX]
variable_regular_range: 999
variable_new_range: 999
gcode:
    {% set regular = params.REGULAR|default(0)|int %}
    {% if not printer.bed_mesh.profile_name %}
      { action_respond_info("_GET_MESH_MINMAX ERROR: No bed mesh loaded!") }
    {% else %}
      {% set vals = {'max': 0, 'min': 999} %}
      {% for line in printer.bed_mesh.mesh_matrix %}
        {% for point in line %}
          {% if point|float > vals.max|float %}
            {% if vals.update({'max': point}) %} {% endif %}
          {% endif %}    
          {% if point|float < vals.min|float %}
            {% if vals.update({'min': point}) %} {% endif %}
          {% endif %} 
        {% endfor %}
      {% endfor %}
      {% if regular %}
        SET_GCODE_VARIABLE MACRO=_GET_MESH_MINMAX VARIABLE=regular_range VALUE={vals.max|float - vals.min|float}
      {% else %}
        SET_GCODE_VARIABLE MACRO=_GET_MESH_MINMAX VARIABLE=new_range VALUE={vals.max|float - vals.min|float}
      {% endif %}
    {% endif %}

[gcode_macro _GET_REGULAR_MESH_MINMAX]
gcode:
    {% if printer.configfile.config['bed_mesh REGULAR'] %}
      BED_MESH_PROFILE load=REGULAR
      _GET_MESH_MINMAX REGULAR=1
    {% else %}
      { action_respond_info("_GET_REGULAR_MESH_MINMAX ERROR: No mesh named REGULAR! Check your config!") }
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
    {% set enabled = printer["gcode_macro _VGB"].enable %}

    {% if enabled %}
      _VGB
    {% else %}
      BASE_BED_MESH_CALIBRATE
    {% endif %}

[gcode_macro SET_VGB]
gcode:
    #get current state if not provided by params
    {% set ENABLE = params.ENABLE|default(printer["gcode_macro _VGB"].enable)|string %}
    #input checks
    {% if ENABLE == "0" or ENABLE == "1" %}
      {% set regular_range = printer["gcode_macro _GET_MESH_MINMAX"].regular_range %}
      {% set new_range = printer["gcode_macro _GET_MESH_MINMAX"].new_range %}
      {% set enabled = printer["gcode_macro _VGB"].enable %}

      {% if not enabled|int == ENABLE|int %}
        SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=enable VALUE={ENABLE}
        {% if not regular_range == 999 and not new_range == 999 %}
          _VGB
        {% elif (regular_range == 999 and not new_range == 999) or (not regular_range == 999 and new_range == 999) %}
          { action_respond_info("SET_GBC: Internal ERROR! One range is set but the other is not. This is not an allowed state. Do not call underscored macros on your own! Disabling GBC for safety.") }
          SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=enable VALUE=0
        {% endif %}
      {% endif %}
      QUERY_VGB
    {% else %}
      { action_respond_info("Invalid parameter ENABLE value '%s' - must be 0 or 1" % (ENABLE|int)) }
    {% endif %}

[gcode_macro QUERY_VGB]
gcode:
    {% set regular_range = printer["gcode_macro _GET_MESH_MINMAX"].regular_range %}
    {% set new_range = printer["gcode_macro _GET_MESH_MINMAX"].new_range %}
    {% set vgb_z_offset = printer["gcode_macro _VGB"].vgb_z_offset %}
    {% set enabled = printer["gcode_macro _VGB"].enable %}
    { action_respond_info("Regular mesh range : %s \n New mesh range : %s \n Enabled: %s \n VGB Z offset: %s mm" % (regular_range, new_range, enabled, vgb_z_offset)) }



















