[gcode_macro _VGB]
variable_temp_min: 0.0
variable_temp_max: 999.9
variable_step: 0.1
variable_enable: 1
variable_thermistor_name: "temperature_sensor frame"
############################ DO NOT CHANGE ANYTHING BELOW UNLESS YOU KNOW WHAT YOU ARE DOING ####################################
variable_last_temp: 0
gcode:
  {% if enable %}
    #take <thermistor_name> temp, load bed mesh that is closest
    #precautions - range() only takes integers
    {% set mult_min = 10**((temp_min|string)|length) %}
    {% set mult_max = 10**((temp_max|string)|length) %}
    {% set mult_step = 10**((temp_step|string)|length) %}
    {% if mult_min > mult_max %}
      {% if mult_min > mult_step %}
        {% set multiplier = mult_min %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% else %}
      {% if mult_max > mult_step %}
        {% set multiplier = mult_max %}
      {% else %}
        {% set multiplier = mult_step %}
      {% endif %}
    {% endif %}
    #get current temp
    {% set current_temp = printer[thermistor_name].temperature|float %}
    SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=last_temp VALUE={current_temp|float}
    #find closest value to current temp
    {% set vals = {'min': 999, 'temp': 999} %}
    {% for temp in range((temp_min*multiplier)|int, (temp_max*multiplier)|int, (step*multiplier)|int) %}
      {% if ((temp/multiplier)|float-current_temp)|abs < vals.min|float %}
        {% if  vals.update({'min': ((temp/multiplier)|float-current_temp)|abs}) %} {% endif %}
        {% if  vals.update({'temp': (temp/multiplier)}) %} {% endif %}
      {% endif %}
    {% endfor %}
    BED_MESH_PROFILE LOAD={vals.temp} #apply best match
  {% endif %}

[delayed_gcode RUN_VGB]
initial_duration: 1
gcode:
  {% if printer["gcode_macro _VGB"].temp_min|float == 0.0 or printer["gcode_macro _VGB"].temp_max|float == 999.9  %}
    { action_respond_info("VGB: Stock values present! Modify the config to reflect your own values and restart!") }
  {% else %}
    UPDATE_DELAYED_GCODE ID=RUN_VGB DURATION=10
    _VGB
  {% endif %}

[gcode_macro SET_VGB]
gcode:
    #get current state if not provided by params
    {% set ENABLE = params.ENABLE|default(printer["gcode_macro _VGB"].enable)|string %}
    #input checks
    {% if ENABLE == "0" or ENABLE == "1" %}
      {% set enabled = printer["gcode_macro _VGB"].enable %} #current enable status

      {% if not enabled|int == ENABLE|int %}
        SET_GCODE_VARIABLE MACRO=_VGB VARIABLE=enable VALUE={ENABLE}
      {% endif %}
      QUERY_VGB
    {% else %}
      { action_respond_info("Invalid parameter ENABLE value '%s' - must be 0 or 1" % (ENABLE|int)) }
    {% endif %}

[gcode_macro QUERY_VGB]
gcode:
    {% set enabled = printer["gcode_macro _VGB"].enable %}
    {% set last_temp = printer["gcode_macro _VGB"].last_temp %}
    {% set current_mesh = printer.bed_mesh.profile_name%}
    { action_respond_info("VGB: \n Enabled: %s \n Last temp: %s C \n Mesh profile loaded: %s " % (enabled, last_temp, current_mesh)) }



















